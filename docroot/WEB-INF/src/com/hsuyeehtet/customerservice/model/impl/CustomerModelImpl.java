/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hsuyeehtet.customerservice.model.impl;

import com.hsuyeehtet.customerservice.model.Customer;
import com.hsuyeehtet.customerservice.model.CustomerModel;
import com.hsuyeehtet.customerservice.model.CustomerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;AAACustomerPortlet_Customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.hsuyeehtet.customerservice.model.CustomerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * @author hsuyeehtet
 * @see CustomerImpl
 * @see com.hsuyeehtet.customerservice.model.Customer
 * @see com.hsuyeehtet.customerservice.model.CustomerModel
 * @generated
 */
@JSON(strict = true)
public class CustomerModelImpl extends BaseModelImpl<Customer>
	implements CustomerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer model instance should use the {@link com.hsuyeehtet.customerservice.model.Customer} interface instead.
	 */
	public static final String TABLE_NAME = "AAACustomerPortlet_Customer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "customerId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "customerName", Types.VARCHAR },
			{ "customerEmail", Types.VARCHAR },
			{ "customerContact", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "township", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "payment", Types.VARCHAR },
			{ "servicesId", Types.BIGINT },
			{ "orderTime", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table AAACustomerPortlet_Customer (uuid_ VARCHAR(75) null,customerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customerName VARCHAR(75) null,customerEmail VARCHAR(75) null,customerContact VARCHAR(75) null,address VARCHAR(75) null,township VARCHAR(75) null,state_ VARCHAR(75) null,payment VARCHAR(75) null,servicesId LONG,orderTime DATE null)";
	public static final String TABLE_SQL_DROP = "drop table AAACustomerPortlet_Customer";
	public static final String ORDER_BY_JPQL = " ORDER BY customer.customerName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AAACustomerPortlet_Customer.customerName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.hsuyeehtet.customerservice.model.Customer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.hsuyeehtet.customerservice.model.Customer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.hsuyeehtet.customerservice.model.Customer"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long CUSTOMERNAME_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Customer toModel(CustomerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Customer model = new CustomerImpl();

		model.setUuid(soapModel.getUuid());
		model.setCustomerId(soapModel.getCustomerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCustomerName(soapModel.getCustomerName());
		model.setCustomerEmail(soapModel.getCustomerEmail());
		model.setCustomerContact(soapModel.getCustomerContact());
		model.setAddress(soapModel.getAddress());
		model.setTownship(soapModel.getTownship());
		model.setState(soapModel.getState());
		model.setPayment(soapModel.getPayment());
		model.setServicesId(soapModel.getServicesId());
		model.setOrderTime(soapModel.getOrderTime());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Customer> toModels(CustomerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Customer> models = new ArrayList<Customer>(soapModels.length);

		for (CustomerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.hsuyeehtet.customerservice.model.Customer"));

	public CustomerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Customer.class;
	}

	@Override
	public String getModelClassName() {
		return Customer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("customerId", getCustomerId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("customerName", getCustomerName());
		attributes.put("customerEmail", getCustomerEmail());
		attributes.put("customerContact", getCustomerContact());
		attributes.put("address", getAddress());
		attributes.put("township", getTownship());
		attributes.put("state", getState());
		attributes.put("payment", getPayment());
		attributes.put("servicesId", getServicesId());
		attributes.put("orderTime", getOrderTime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long customerId = (Long)attributes.get("customerId");

		if (customerId != null) {
			setCustomerId(customerId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String customerName = (String)attributes.get("customerName");

		if (customerName != null) {
			setCustomerName(customerName);
		}

		String customerEmail = (String)attributes.get("customerEmail");

		if (customerEmail != null) {
			setCustomerEmail(customerEmail);
		}

		String customerContact = (String)attributes.get("customerContact");

		if (customerContact != null) {
			setCustomerContact(customerContact);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String township = (String)attributes.get("township");

		if (township != null) {
			setTownship(township);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String payment = (String)attributes.get("payment");

		if (payment != null) {
			setPayment(payment);
		}

		Long servicesId = (Long)attributes.get("servicesId");

		if (servicesId != null) {
			setServicesId(servicesId);
		}

		Date orderTime = (Date)attributes.get("orderTime");

		if (orderTime != null) {
			setOrderTime(orderTime);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		_customerId = customerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCustomerName() {
		if (_customerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerName;
		}
	}

	@Override
	public void setCustomerName(String customerName) {
		_columnBitmask = -1L;

		_customerName = customerName;
	}

	@JSON
	@Override
	public String getCustomerEmail() {
		if (_customerEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerEmail;
		}
	}

	@Override
	public void setCustomerEmail(String customerEmail) {
		_customerEmail = customerEmail;
	}

	@JSON
	@Override
	public String getCustomerContact() {
		if (_customerContact == null) {
			return StringPool.BLANK;
		}
		else {
			return _customerContact;
		}
	}

	@Override
	public void setCustomerContact(String customerContact) {
		_customerContact = customerContact;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getTownship() {
		if (_township == null) {
			return StringPool.BLANK;
		}
		else {
			return _township;
		}
	}

	@Override
	public void setTownship(String township) {
		_township = township;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getPayment() {
		if (_payment == null) {
			return StringPool.BLANK;
		}
		else {
			return _payment;
		}
	}

	@Override
	public void setPayment(String payment) {
		_payment = payment;
	}

	@JSON
	@Override
	public long getServicesId() {
		return _servicesId;
	}

	@Override
	public void setServicesId(long servicesId) {
		_servicesId = servicesId;
	}

	@JSON
	@Override
	public Date getOrderTime() {
		return _orderTime;
	}

	@Override
	public void setOrderTime(Date orderTime) {
		_orderTime = orderTime;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Customer.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Customer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Customer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Customer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setUuid(getUuid());
		customerImpl.setCustomerId(getCustomerId());
		customerImpl.setGroupId(getGroupId());
		customerImpl.setCompanyId(getCompanyId());
		customerImpl.setUserId(getUserId());
		customerImpl.setUserName(getUserName());
		customerImpl.setCreateDate(getCreateDate());
		customerImpl.setModifiedDate(getModifiedDate());
		customerImpl.setCustomerName(getCustomerName());
		customerImpl.setCustomerEmail(getCustomerEmail());
		customerImpl.setCustomerContact(getCustomerContact());
		customerImpl.setAddress(getAddress());
		customerImpl.setTownship(getTownship());
		customerImpl.setState(getState());
		customerImpl.setPayment(getPayment());
		customerImpl.setServicesId(getServicesId());
		customerImpl.setOrderTime(getOrderTime());

		customerImpl.resetOriginalValues();

		return customerImpl;
	}

	@Override
	public int compareTo(Customer customer) {
		int value = 0;

		value = getCustomerName().compareTo(customer.getCustomerName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Customer)) {
			return false;
		}

		Customer customer = (Customer)obj;

		long primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CustomerModelImpl customerModelImpl = this;

		customerModelImpl._originalUuid = customerModelImpl._uuid;

		customerModelImpl._originalGroupId = customerModelImpl._groupId;

		customerModelImpl._setOriginalGroupId = false;

		customerModelImpl._originalCompanyId = customerModelImpl._companyId;

		customerModelImpl._setOriginalCompanyId = false;

		customerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Customer> toCacheModel() {
		CustomerCacheModel customerCacheModel = new CustomerCacheModel();

		customerCacheModel.uuid = getUuid();

		String uuid = customerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			customerCacheModel.uuid = null;
		}

		customerCacheModel.customerId = getCustomerId();

		customerCacheModel.groupId = getGroupId();

		customerCacheModel.companyId = getCompanyId();

		customerCacheModel.userId = getUserId();

		customerCacheModel.userName = getUserName();

		String userName = customerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customerCacheModel.createDate = createDate.getTime();
		}
		else {
			customerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		customerCacheModel.customerName = getCustomerName();

		String customerName = customerCacheModel.customerName;

		if ((customerName != null) && (customerName.length() == 0)) {
			customerCacheModel.customerName = null;
		}

		customerCacheModel.customerEmail = getCustomerEmail();

		String customerEmail = customerCacheModel.customerEmail;

		if ((customerEmail != null) && (customerEmail.length() == 0)) {
			customerCacheModel.customerEmail = null;
		}

		customerCacheModel.customerContact = getCustomerContact();

		String customerContact = customerCacheModel.customerContact;

		if ((customerContact != null) && (customerContact.length() == 0)) {
			customerCacheModel.customerContact = null;
		}

		customerCacheModel.address = getAddress();

		String address = customerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			customerCacheModel.address = null;
		}

		customerCacheModel.township = getTownship();

		String township = customerCacheModel.township;

		if ((township != null) && (township.length() == 0)) {
			customerCacheModel.township = null;
		}

		customerCacheModel.state = getState();

		String state = customerCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			customerCacheModel.state = null;
		}

		customerCacheModel.payment = getPayment();

		String payment = customerCacheModel.payment;

		if ((payment != null) && (payment.length() == 0)) {
			customerCacheModel.payment = null;
		}

		customerCacheModel.servicesId = getServicesId();

		Date orderTime = getOrderTime();

		if (orderTime != null) {
			customerCacheModel.orderTime = orderTime.getTime();
		}
		else {
			customerCacheModel.orderTime = Long.MIN_VALUE;
		}

		return customerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", customerId=");
		sb.append(getCustomerId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", customerName=");
		sb.append(getCustomerName());
		sb.append(", customerEmail=");
		sb.append(getCustomerEmail());
		sb.append(", customerContact=");
		sb.append(getCustomerContact());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", township=");
		sb.append(getTownship());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", payment=");
		sb.append(getPayment());
		sb.append(", servicesId=");
		sb.append(getServicesId());
		sb.append(", orderTime=");
		sb.append(getOrderTime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.hsuyeehtet.customerservice.model.Customer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerId</column-name><column-value><![CDATA[");
		sb.append(getCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerName</column-name><column-value><![CDATA[");
		sb.append(getCustomerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerEmail</column-name><column-value><![CDATA[");
		sb.append(getCustomerEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerContact</column-name><column-value><![CDATA[");
		sb.append(getCustomerContact());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>township</column-name><column-value><![CDATA[");
		sb.append(getTownship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payment</column-name><column-value><![CDATA[");
		sb.append(getPayment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>servicesId</column-name><column-value><![CDATA[");
		sb.append(getServicesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderTime</column-name><column-value><![CDATA[");
		sb.append(getOrderTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Customer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Customer.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _customerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _customerName;
	private String _customerEmail;
	private String _customerContact;
	private String _address;
	private String _township;
	private String _state;
	private String _payment;
	private long _servicesId;
	private Date _orderTime;
	private long _columnBitmask;
	private Customer _escapedModel;
}